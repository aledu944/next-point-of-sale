// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  slug  String @unique
  image String

  // products Product[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  slug        String @unique
  image       String
  description String
  price       Float  @default(0)
  stock       Int    @default(0)

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  // OrderDetails OrderDetails[]
  OrderItem OrderItem[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Order de compras
model Order {
  id     String  @id @default(uuid())
  total  Float
  status Boolean

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  // Relaciones
  OrderItem OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  // Relaciones
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}
